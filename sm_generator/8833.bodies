class UmlItem
!!!144386.cpp!!!	getChild(in k : anItemKind, in s : string) : UmlItem
  const Q3PtrVector<UmlItem> ch = children();
  unsigned index;
  
  if (k == aRelation) {
    for (index = 0; index != ch.count(); index += 1)
      if ((ch[index]->kind() == aRelation) &&
	  (((UmlRelation *) ch[index])->roleName() == s))
	return ch[index];
  }
  else {
    for (index = 0; index != ch.count(); index += 1)
      if ((ch[index]->kind() == k) && (ch[index]->name() == s))
	return ch[index];
  }

  return 0;
!!!144770.cpp!!!	quotedName() : string
  QByteArray r;
  const char * s = name();

  for (;;) {
    char c = *s++;
    
    if (((c >= 'a') && (c <= 'z')) ||
	((c >= 'A') && (c <= 'Z')) ||
	((c >= '0') && (c <= '9')) ||
	(c == '_'))
      r += c;
    else if (c == ' ')
      r += '_';
    else if (c == 0)
      return r;
  }

!!!144130.cpp!!!	generate() : void
  UmlCom::trace("Error : must be applied on a state machine<br>");
!!!193666.cpp!!!	setUseless() : void
 QByteArray dummy;
 
 if (propertyValue("STM generated", dummy))
   set_PropertyValue("STM generated", "0");
 
 const Q3PtrVector<UmlItem> v = children();
    
 for (unsigned index = v.count(); index != 0; index -= 1)
   v[index - 1]->setUseless();
!!!193794.cpp!!!	setUsed() : void
  set_PropertyValue("STM generated", "");
!!!193922.cpp!!!	deleteUseless() : void
  QByteArray v;
  
  if (propertyValue("STM generated", v) && (v == "0"))
    // useless
    deleteIt();
  else {
    const Q3PtrVector<UmlItem> v = children();
    
    for (unsigned index = v.count(); index != 0; index -= 1)
      v[index - 1]->deleteUseless();
  }
!!!211970.cpp!!!	realName(in s : string, in decl : string) : string
  int pos = decl.find("${name}");
  
  if (pos == -1)
    return s;
  
  int start = pos;
  QChar c;
  
  while ((start != 0) && 
	 (((c = decl[start - 1]).isLetterOrNumber()) ||
	  (c == '_')))
    start -= 1;
  
  int len = s.length();
  int sup = pos + 7;
  
  while ((sup != len) &&
	 (((c = decl[sup]).isLetterOrNumber()) ||
	  (c == '_')))
    sup += 1;
  
  return decl.mid(start, pos - start) + s + decl.mid(pos + 7, sup - pos - 7);
